#
# parser.metacoffee
#
#   Grammar definitions and abstract syntax tree generation
#

errorHandler = require './errorprinter'
{concat, join} = require './metaCoffeeUtils'
{log} = require './utils'

module.exports = (OMeta, OMLib) -> parse: (input) ->
  {Set} = OMLib

  # Returns set of reserved keywords given a list of tokens used in the grammar rules.
  # Ignores non-word tokens, e.g. punctuation and operators.
  getKeywords = (usedTokens) ->
    keywords = new Set
    words = concat (token.split /\W/ for token in usedTokens)...
    (keywords.add word) for word in words when word.match /^[a-zA-Z]/
    keywords.values()

  #
  # Grammar rules
  #
  #   Rules are of the form
  #
  #     rule name = non-terminal or terminal symbols -> semantic action
  #
  #   Anything to the right of the -> in the rule definition is evaluated as
  #   CoffeeScript code. In CoffeeScript, the last statement in a function is
  #   returned implicitly without the need for a `return` keyword. Most
  #   semantic actions return a new abstract syntax tree node.
  #
  #   A symbol sequence without a semantic action to the right of the -> will
  #   always return the value of the application of the right-most symbol.
  #
  #   Semantic actions can be also included in between symbols, by enclosing 
  #   them in curly braces.
  #
  #   The `at` field is populated by MetaCoffee with the beginning
  #   and end locations in the input stream over which the given rule matches.
  #
  #   Strings inside double quotes are a shorthand for the parametrized `token`
  #   rule, for example "foo" is shorthand for the rule `token('foo')`.
  #
  #   The built-in `token` rule matches the given string preceded by any number
  #   of spaces. MetaCoffee also creates an array of used tokens, `@usedTokens`,
  #   which we use to generate the set of reserved keywords, in `initialize`.
  #
  #   The `initialize` rule is implicitly called at the beginning of the
  #   parsing process.
  #
  #   We have overwritten the built-in `token` rule to split the given
  #   string into words which can have arbitrary whitespace between each other.
  #   We also check that keywords, strings ending with a letter, are not 
  #   followed by another letter. These changes match the behaviour of a
  #   traditional lexer.
  #
  #   We have also overwritten the built-in `space` rule, from which `spaces`
  #   is derived, to ignore MAlice comments.
  #
  ometa MAlice
    program          = declarations:ds spaces end                     -> ['Program', at, ds]
    function         = (valueFunction | voidFunction):d               -> [concat ['Function', at], d]
    valueFunction    = "The room"          identifier:i args:as
                       "contained a" type:returnType
                       block:b                                        -> [i, returnType, as, b]
    voidFunction     = "The looking-glass" identifier:i args:as
                       block:b                                        -> [i, ['Type', at, 'void'], as, b]
    args             = "(" listOf('argDeclaration', ','):as ")"       -> concat ['Arguments', at], as
    argDeclaration   = eType:t identifier:n                           -> ['Argument', at, n, t]
    block            = "opened"
                       (declarations:ds statements:ss)? "closed"      -> ['Block', at, ds, ss ? ['Statements', at]]
    declarations     = array:inits declaration*:ds                    -> concat ['Declarations', at], concat ds...
    declaration      = function
                     | variable:v terminator                          -> v
    variable         = identifier:i "was a" type:t
                       ( "of" expression:e                            -> [['Assignment', at, ['Dereference', at, i], e]]
                       | "too"                                        -> []
                       )?:init                                        -> concat [['Variable', at, i, t]], init
                     | identifier:i "had" expression:n type:t         -> [['Array', at, i, n, t]]
    statements       = statement+:ss                                  -> concat ['Statements', at], ss
    statement        = (assignment | saying | call):s terminator      -> s
                     | "."                                            -> ['Skip']
                     | finding | question | perhaps | either | loop
                     | block
    terminator       =  ("." | "," | "and" | "but" | "then")
    assignment       = assignable:x ("became" expression:e            -> ['Assignment', at, x, e]
                                    | "drank"                         -> ['Decrement', at, x]
                                    | "ate"                           -> ['Increment', at, x]
                                    )
    assignable       = arrayPiece | dereference
    saying           = expression:e ("said Alice" | "spoke")          -> ['Output', at, e]
    call             = callExpression:e                               -> e[2] = yes; e
    callExpression   = dereference:i "(" expressionList:es ")"        -> concat ['Call', at, no, i], es
    expressionList   = listOf('expression', ',')
    finding          = "Alice found" expression:e "."                 -> ['Return', at, e]
    question         = "what was" assignable:x "?"                    -> ['Input', at, x]
    perhaps          = "perhaps"  if:css elseIf?:elif endIf           -> concat ['If', at], css, [elif ? ['Skip']]
    either           = "either"   if:css    else:els  endIf           -> concat ['If', at], css, [els]
    elseIf           = "or maybe" if:css elseIf?:elif                 -> concat ['If', at], css, [elif ? ['Skip']]
                     | else
    if               = "(" expression:c ") so" statements:ss          -> [c, ss]
    else             =  "or" statements
    endIf            = "because Alice was unsure which"
    loop             = "eventually (" expression:c ") because"
                         statements:ss "enough times"                 -> ['Until', at, c, ss]
    eType            = "spider" type:t                                -> ['Spider', at, t]
                     | type
    type             = ("number" | "letter" | "sentence"):t           -> ['Type', at, t]
    expression       = or
    or               = or:b1  "||" and:b2                             -> ['Logic', at, '||', b1, b2]
                     | and
    and              = and:b1 "&&" negation:b2                        -> ['Logic', at, '&&', b1, b2]
                     | negation
    negation         = "!" negation:b                                 -> ['Logic', at, '!', b]
                     | comparison
    comparison       = comparison:e1 comparisonOp:op bitwiseOr:e2     -> ['Compare', at, op, e1, e2]
                     | bitwiseOr
    comparisonOp     = "==" | ">=" | "<=" | "!=" | "<" | ">"
    bitwiseOr        = bitwiseOr:e1 "|" bitwiseXOr:e2                 -> ['Arithmetic', at, '|', e1, e2]
                     | bitwiseXOr
    bitwiseXOr       = bitwiseXOr:e1 "^" bitwiseAnd:e2                -> ['Arithmetic', at, '^', e1, e2]
                     | bitwiseAnd
    bitwiseAnd       = bitwiseAnd:e1 "&" additive:e2                  -> ['Arithmetic', at, '&', e1, e2]
                     | additive
    additive         = additive:e1 additiveOp:op multiplicative:e2    -> ['Arithmetic', at, op, e1, e2]
                     | multiplicative
    additiveOp       = "+" | "-"
    multiplicative   = multiplicative:e1 multiplicativeOp:op unary:e2 -> ['Arithmetic', at, op, e1, e2]
                     | unary
    multiplicativeOp = "*" | "/" | "%"
    unary            = unaryOp:op unary:e                             -> ['Unary', at, op, e]
                     | value
    unaryOp          = "~" | "-" | "+"
    value            = number | character | string
                     | arrayPiece | callExpression | dereference
                     | "(" expression:e ")"                           -> e
    arrayPiece       = dereference:i "'s" expression:e "piece"        -> ['Element', at, i, e]
    dereference      = identifier:i                                   -> ['Dereference', at, i]
    number           = spaces digit+:ds                               -> ['Number', at, join ds]
    character        = spaces '\'' (!'\'' !'\n' anything):c '\''      -> ['Letter', at, c]
    string           = spaces '"' (!'"' anything)*:xs '"'             -> ['Sentence', at, join xs]
    identifier       = spaces (letter:x (letter | '_' | digit)*:xs    -> x + join xs):i
                       !{i in @keywords}                              -> i
    space            = "###" (!'\n' anything)* | ^space
    token :s         = spaced(s):ts (!letter(s[-1..]) | !letter)      -> ts.join ' '
    spaced :s                                                         -> for word in s.split ' '
                                                                            MAlice.__super__.token.call(this, word)
    array            = empty -> []
    initialize       -> @keywords = getKeywords @usedTokens

  formatError = (interpreter, position) ->
    errorHandler.formatOmetaError "Syntactic error", interpreter, position

  #
  # Main entry point
  # Runs the parser by matching the top-level rule "program" on the given input.
  # Returns either the newly created syntax tree or a string representing a
  # syntax error.
  #
  MAlice.matchAll input, "program", undefined, formatError
