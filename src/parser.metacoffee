module.exports = (OMeta, OMLib) -> parse: (input) ->
  {ometaError} = OMLib

  ometa MAlice
    function
      = funDeclaration:d body:b                                                       -> ['Function'].concat(d, b)
    funDeclaration
      = voidFunction | valueFunction
    voidFunction
      = keyword('The looking-glass') identifier:n args:as                             -> ['void', n, as]
    valueFunction
      = keyword('The room') identifier:n args:as keyword('contained a') identifier:rt -> [rt, n, as]
    args
      = "(" listOf('argDeclaration', ','):as ")" -> as
    argDeclaration = type:t identifier:n -> [t, n]
    body           = keyword('opened') statements keyword('closed')
    statements     = statement*
    statement      = (declaration | assignment | saying) terminator
    terminator     = keyword('too')? ("." | "," | "and" | "but" | "then")
    declaration    = identifier "was a" type
    assignment     = identifier (keyword('became') expression | keyword('drank') | keyword('ate'))
    saying         = expression keyword('said Alice')
    type           = "number"
                   | "letter"
    expression     = bitwiseOr
    bitwiseOr      = bitwiseOr "|" bitwiseXOr
                   | bitwiseXOr
    bitwiseXOr     = bitwiseXOr "^" bitwiseAnd
                   | bitwiseAnd
    bitwiseAnd     = bitwiseAnd "&" addition
                   | addition
    addition       = addition "+" multiplication
                   | addition "-" multiplication
                   | multiplication
    multiplication = multiplication "*" negation
                   | multiplication "/" negation
                   | multiplication "%" negation
                   | negation
    negation       = "~" value
                   | value
    value          = number | character | identifier
    number         = spaces digit+
    character      = spaces '\'' letter '\''
    identifier     = spaces letter:x (letter | '_')*:xs -> x + xs.join('')
    keyword :s     = token(s) !letter

  MAlice.matchAll(input, "function", undefined, ometaError)