module.exports = (OMeta, OMLib) -> parse: (input) ->
  {ometaError} = OMLib

  ometa MAlice
    function       = funDeclaration body
    funDeclaration = voidFunction | valueFunction
    voidFunction   = keyword('The looking-glass') identifier args
    valueFunction  = keyword('The room') identifier args keyword('contained a') identifier
    args           = "(" listOf('argDeclaration', ',') ")"
    argDeclaration = type identifier
    body           = keyword('opened') statements keyword('closed')
    statements     = statement*
    statement      = (declaration | assignment | saying) terminator
    terminator     = keyword('too')? ("." | "," | "and" | "but" | "then")
    declaration    = identifier "was a" type
    assignment     = identifier (keyword('became') expression | keyword('drank') | keyword('ate'))
    saying         = expression keyword('said Alice')
    type           = "number"
                   | "letter"
    expression     = bitwiseOr
    bitwiseOr      = bitwiseOr "|" bitwiseXOr
                   | bitwiseXOr
    bitwiseXOr     = bitwiseXOr "^" bitwiseAnd 
                   | bitwiseAnd
    bitwiseAnd     = bitwiseAnd "&" addition 
                   | addition
    addition       = addition "+" multiplication
                   | addition "-" multiplication
                   | multiplication
    multiplication = multiplication "*" negation
                   | multiplication "/" negation
                   | multiplication "%" negation
                   | negation
    negation       = "~" value
                   | value
    value          = number | character | identifier
    number         = spaces digit+
    character      = spaces '\'' letter '\''
    identifier     = spaces letter (letter | '_')*
    keyword :s     = token(s) !letter

  MAlice.matchAll(input, "function", undefined, ometaError)