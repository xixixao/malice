module.exports = (OMeta, OMLib) -> parse: (input) ->
  {ometaError} = OMLib

  join = (xs) ->
    xs.join ''

  concat = (xs...) ->
    xs[0].concat xs[1..]...

  ometa MAlice
    function       = funDeclaration:d body:b                              -> concat ['Function'], d, b
    funDeclaration = voidFunction | valueFunction
    voidFunction   = "The looking-glass" identifier:n args:as             -> ['void', n, as]
    valueFunction  = "The room"          identifier:n args:as
                     "contained a" identifier:rt                          -> [rt, n, as]
    args           = "(" listOf('argDeclaration', ','):as ")"             -> as
    argDeclaration = type:t identifier:n                                  -> [t, n]
    body           = "opened" declarations statements "closed"
    declarations   = declaration*
    declaration    = identifier "was a" type "too"? terminator
    statements     = statement*
    statement      = (assignment | saying) terminator
    terminator     =  ("." | "," | "and" | "but" | "then")
    assignment     = identifier ("became" expression | "drank" | "ate")
    saying         = expression "said Alice"
    type           = "number"
                   | "letter"
                   | "sentence"
    expression     = bitwiseOr
    bitwiseOr      = bitwiseOr "|" bitwiseXOr
                   | bitwiseXOr
    bitwiseXOr     = bitwiseXOr "^" bitwiseAnd
                   | bitwiseAnd
    bitwiseAnd     = bitwiseAnd "&" addition
                   | addition
    addition       = addition "+" multiplication
                   | addition "-" multiplication
                   | multiplication
    multiplication = multiplication "*" negation
                   | multiplication "/" negation
                   | multiplication "%" negation
                   | negation
    negation       = "~" value
                   | value
    value          = number | character | string | identifier
    number         = spaces digit+
    character      = spaces '\'' letter '\''
    string         = spaces '"' (!'"' anything)*:xs '"'                   -> join xs
    identifier     = spaces letter:x (letter | '_')*:xs                   -> x + join xs
    token :s       = ^token(s):t (!letter(s.charAt(0)) | !letter)         -> t

  MAlice.matchAll(input, "function", undefined, ometaError)