dump = require './jsDump'
clc = require('cli-color');
errorHandler = require('./errorprinter');

module.exports = (OMeta, OMLib) -> analyze: (source, ast) ->

  locate = (where) ->
    where?.position?() ? where

  error = (message, where, detail) ->
    console.error errorHandler.format
      label: "Semantic error"
      input: source
      position: locate where
      message: message
      detail: locate detail

  typeError = (name, expected, actual, expectedWhere) ->
    if not Array.isArray expected
      expected = [expected]
    expectedLabels = ("'#{type}'" for type in expected).join ' or '
    if not expectedWhere?
      error "Type clash for #{name}, expected #{expectedLabels}, got '#{actual.type}'", actual
    else
      error "Type clash for #{name}, got '#{actual.type}', expected #{expectedLabels} as declared", actual, expectedWhere

  positionOf = (values) ->
    [start, _] = values[0].position()
    [_, end] = values[-1..][0].position()
    [start, end]

  log = (xs...) ->
    console.log dump.parse x for x in xs

  ometa MAliceSemantics
    trans = <[:t apply(t):ans]>:node -> ans?.node = node[0]; ans

    Program :pos createScope:scope trans:declarations
      ->  hatta = scope.get 'hatta'
          if not hatta?
            error "The main function named 'hatta' was not declared."
          else if not hatta.type.equals types.function
            error "The main function named 'hatta' was not declared. Instead, 'hatta' was declared as '#{hatta.type}'", hatta
          else if not hatta.returnType.equals types.void
            error "The main function named 'hatta' cannot return a value. " +
                  "Instead, 'hatta' was declared to return '#{hatta.returnType}'", hatta.returnType

    Function :pos :name trans:returnType trans:args  {
        identifier = @declare (new FunctionIdentifier name, returnType, args), pos
        scope = @createScope()
        scope.addAll args
        scope.returns returnType
        return identifier
      }:i trans:body exitScope
      -> i

    Arguments :pos trans*

    Argument :pos :name trans:type
      ->  new Reference name, type

    Block :pos createScope:scope trans:declarations trans:statements exitScope

    Declarations :pos trans*

    Variable :pos :name trans:type trans:value
      ->  @declare (new Reference name, type), pos

    Array :pos :name trans:size trans:itemType
      ->  typeError "specifying array size", types.number, size unless size.type.equals types.number
          @declare (new Reference name, new ArrayType itemType), pos

    Skip
      ->
    Assignment :pos trans:assignable trans:value
      ->  if not assignable.type.isDynamic
            error "Reference of type '#{assignable.type}' cannot be assigned to", assignable
          else if not assignable.type.equals value.type
            error "Type clash in assignment, reference is a '#{assignable.type}', value is a '#{value.type}'", value

    Decrement :pos trans:variable
      ->  typeError "decrement", types.number, variable unless variable.type.equals types.number

    Increment :pos trans:variable
      ->  typeError "increment", types.number, variable unless variable.type.equals types.number

    Output :pos trans:value
      ->  error "'#{value.type}' has no printable representation", value unless value.type.isDynamic

    Call :pos trans:fun trans*:args
      ->  typeError "function call", types.function, fun unless fun.type.equals types.function
          if args.length isnt fun.args.length
            error "Function #{fun.name} expects #{fun.args.length} arguments, got #{args.length} arguments", positionOf args
          else
            for arg, i in args
              typeError "argument #{i+1}", fun.args[i].type, arg, fun.args[i].type unless arg.type.equals fun.args[i].type
          new Value fun.returnType

    Return :pos trans:value
      ->  currentReturnType = @currentScope.returns()
          if currentReturnType.equals types.void
            error "Return statement inside void function"
          else if not value.type.equals currentReturnType
            typeError "return statement", currentReturnType, value

    Input :pos trans:variable
      ->  typeError "input statement", dynamicTypes, variable unless variable.type.isDynamic

    If :pos trans:cond trans trans
      ->  typeError "condition", types.boolean, cond unless cond.type.equals types.boolean

    Until :pos trans:cond trans
      ->  typeError "loop condition", types.boolean, cond unless cond.type.equals types.boolean

    Statements :pos trans*

    Spider :pos trans:itemType
      ->  new ArrayType itemType

    Type :pos :label
      ->  new Type label

    Logic :pos :op trans:b1 trans?:b2
      ->  for operand in [b1, b2] when operand?
            typeError "operand of #{op}", types.boolean, operand unless operand.type.equals types.boolean
          new Value types.boolean

    Compare :pos :op trans:e1 trans:e2
      ->  for operand in [e1, e2]
            typeError "operand of '#{op}'", arithmeticTypes, operand unless operand.type.equalsAny arithmeticTypes
          unless e1.type.equals e2.type
            error "Type clash for '#{op}', operands must match, got '#{e1.type}' and '#{e2.type}'", pos
          new Value types.boolean

    Arithmetic :pos :op trans:e1 trans:e2
      ->  for operand in [e1, e2]
            unless operand.type.equalsAny arithmeticTypes
              typeError "operand of '#{op}'", arithmeticTypes, operand
              type = types.error
          if not e1.type.equals e2.type
            error "Type clash for '#{op}', operands must match, got '#{e1.type}' and '#{e2.type}'", pos
            type = types.error
          new Value type ? e1.type

    Unary :pos :op trans:e1
      ->  typeError "operand of '#{op}'", types.number, operand unless operand.type.equals types.number
          new Value types.number

    Dereference :pos :name
      ->  reference = @currentScope.get name
          if reference?
            Reference.from reference
          else
            error "'#{name}' is undeclared", pos
            new Reference name, types.error


    Element :pos trans:array trans:index
      ->  if not array.type.isArray?
            typeError "array access", new ArrayType "<?>", array
            type = types.error
          else
            type = array.type.itemType
          typeError "array index", types.number, index unless index.type.equals types.number
          new Value type

    Number :pos :n
      ->  new Value types.number

    Letter :pos :ch
      ->  new Value types.letter

    Sentence :pos :string
      ->  new Value types.sentence

    createScope
      ->  outerScope = @currentScope
          @currentScope = new Scope outerScope, {}

    exitScope
      ->  @currentScope = @currentScope.outer

  MAliceSemantics::declare = (identifier, pos) ->
    alreadyDeclared = @currentScope.declaredInCurrent identifier
    if alreadyDeclared?
      error "'#{identifier.name}' already declared", pos, alreadyDeclared
    else
      @currentScope.add identifier
    #log "#{identifier.name} declared"
    identifier


  class Scope
    constructor: (@outer, @declarations) ->

    toString: ->
      "Scope#{dump.parse @declarations};#{@returnType}"

    add: (identifier) ->
      @declarations[identifier.name] = identifier

    addAll: (identifiers) ->
      @add identifier for identifier in identifiers

    returns: (type) ->
      if type?
        @returnType = type
      else
        @returnType ? @outer.returns()

    declaredInCurrent: (identifier) ->
      @declarations[identifier.name]

    get: (name) ->
      @declarations[name] or @outer?.get name

  class Identifier # Also holds a reference to the ASTnode that declares Identifier
    position: ->
      if @node
        [nodeName, pos] = @node
        pos
      else
        null

  class Type extends Identifier
    constructor: (@label) ->
      @isDynamic = true
    equals: (t) ->
      @label is t.label or t.isError
    equalsAny: (ts) ->
      ts.some (t) ->
        @equals t
      , this
    toString: ->
      @label

  class FunctionType extends Type
    constructor: ->
      super "function"
      @isDynamic = no

  class ArrayType extends Type
    constructor: (@itemType) ->
      @isArray = yes
      @isDynamic = no
    equals: (t) ->
      t.isArray and @itemType.equals t.itemType
    toString: ->
      "spider #{@itemType}"

  class ErrorType extends Type
    constructor: ->
      @isError = yes
    equals: (t) ->
      yes
    toString: ->
      "error"

  class Value extends Identifier
    constructor: (@type) ->

  class Reference extends Identifier
    constructor: (@name, @type) ->
    @from: (identifier) ->
      copy = new Reference
      for own key, value of identifier
        copy[key] = value
      copy.declaredAt = identifier.position()
      copy

  class FunctionIdentifier extends Identifier
    constructor: (@name, @returnType, @args) ->
      @type = new FunctionType

  types =
    number: new Type "number"
    letter: new Type "letter"
    sentence: new Type "sentence"
    boolean: new Type "boolean"
    function: new FunctionType
    void: new Type "void"
    error: new ErrorType

  dynamicTypes = [types.number, types.letter, types.sentence]
  arithmeticTypes = [types.number, types.letter]

  MAliceSemantics.match ast, "trans", undefined, (m, i) -> console.error "ERROR while traversing ast in semantic analyzer in #{m}, #{i}"