#
# translation.metacoffee
#
#   Translates annotated AST into Three Address Code
#

{concat, join} = require './../metaCoffeeUtils'
{log} = require './../utils'
Namer = require './namer'

module.exports = (OMeta, OMLib) -> translate: (source, ast) ->

  calleeRegs = ["$bx", "$12", "$13", "$14", "$15"]

  namer = new Namer

  ometa MAliceTranslator
    trans     :node = transNode(node, node)
    transNode :node = [:t (!{@[t]?} anything* {node} | prepend([node]) apply(t)):ans] -> ans
    head = empty {log @input.head()} empty
         | {log "There's nothing here"} empty

    Program :node :pos :scope enterScope(scope) trans:declarations
      ->  hatta = scope.get 'hatta'
          if declarations.length == 0
            main = hatta.code
            main[0][1] = "main" #rename from hatta to main
            concat @functions.filter((f) -> f isnt main), [main]
          else
            [freePushes, freePops] = @passFreeVariables hatta.scope()
            concat @functions, [concat [
              ['Label', 'main']
              ['Begin']
            ], @wrapCalleesAround(concat(declarations, freePushes, [
              ['Call', 'hatta', 0]
            ], freePops)), [
              ['End', 'main']
            ]]

    Function :node :pos :type :name :returnType {@argCount = 0} [trans*:args] :scope {
          i = args.length
          for freeName, freeNode of scope.frees
            scope.freeNames[freeName] = [i++]
          return @declare(node, name)
    }:mangledName trans:body
      ->  decl = concat [
            ['Label', mangledName]
            ['Begin']
          ], @wrapCalleesAround(concat(args, body)), [
            ['End', mangledName]
          ]
          decl.function = true
          node.code = decl
          decl

    Argument :node :pos :type :name
      ->  ['Argument', @declare(node, name), type, @argCount++]

    Block :node :pos :returns :scope enterScope(scope) trans:declarations trans:statements exitScope
      ->  concat declarations, statements

    Declarations :node :pos trans*:ds
      ->  simples = []
          for d in ds
            if d.function?
              @functions.push d
            else
              simples.push d...
          simples

    Variable :node :pos :type :name
      ->  @declare(node, name)
          [['Variable']]

    Array :node :pos :type :name trans:size
      ->  [body, result] = @source size
          decl = concat body, [['Array', @declare(node, name), type, result]]
          decl.simple = yes
          decl

    Statements :node :pos :returns trans*:ss
      -> concat ss...

    Skip :node :pos :returns
      -> []

    Assignment :node :pos :returns ['Element' :elempos
                                   :type trans:array trans:index] trans:value
      ->  [indexbody, indexresult] = @source index
          [arraybody, arrayresult] = @source array
          [body, result] = @source value
          concat body, arraybody, indexbody, [
            ['ArrayAssignment', arrayresult, indexresult, result, type]
          ]

    Assignment :node :pos :returns trans:assignable trans:value
      ->  [body, result] = @source value
          [after, into] = @destination assignable
          concat body, [
            ["Assignment", into, result]
          ], after

    Decrement :node :pos :returns trans:variable
      ->  [after, into] = @destination variable
          concat [
            ['Decrement', into]
          ], after

    Increment :node :pos :returns trans:variable
      ->  [after, into] = @destination variable
          concat [
            ['Increment', into]
          ], after

    Output :node :pos :returns trans:value
      ->  [body, result] = @source value
          concat body, [
            ['Output', result, node[3].type()]
          ]

    Call :node :pos :detail trans:fun trans*:args
      ->  [freePushes, freePops] = @passFreeVariables node[3].original.scope()
          paramPushes = []
          paramBodies = []
          for [body, result] in args
            paramPushes.unshift ['Param', result]
            paramBodies.push body...
          beforeCall = concat paramBodies, freePushes, paramPushes
          [_, name] = fun
          if detail is false
            concat beforeCall, [
              ['Call', name, args.length]
            ], freePops
          else
            [concat(beforeCall, [
              ['CallAssignment', callResult = @newTemp(), name, args.length]
            ], freePops), callResult]


    Return :node :pos :returns trans:value
      ->  [body, result] = @source value
          concat body, [
             ['Return', result]
          ]

    Input :node :pos :returns trans:variable
      ->  [after, into] = @destination variable
          concat [
            ['Read', into, node[3].type()]
          ], after

    If :node :pos :returns trans:cond trans:ifBody trans?:elseBody
      ->  [condbody, condresult] = cond
          concat condbody, [
            ['IfFalse', condresult, elseLabel = @newLabel()]
          ], ifBody, (if elseBody? then concat [
            ['Jump', endLabel = @newLabel()]
            ['Label', elseLabel]
          ], elseBody, [
            ['Label', endLabel]
          ] else [
            ['Label', elseLabel]
          ])

    IfNot :node :pos :returns trans:cond trans:ifBody
      ->  [condbody, condresult] = cond
          concat condbody, [
            ['IfTrue', condresult, endLabel = @newLabel()]
          ], elseBody, [
            ['Label', endLabel]
          ]

    Until :node :pos :returns trans:cond trans:body
      ->  [condbody, condresult] = cond
          concat [
            ['Label', whileLabel = @newLabel()]
          ], condbody, [
            ['IfTrue', condresult, endLabel = @newLabel()]
          ], body, [
            ['Jump', whileLabel]
            ['Label', endLabel]
          ]

    Logic :node :pos :type :op trans:b1 trans?:b2
      ->  @translateExpression op, b1, b2

    Compare :node :pos :type :op trans:e1 trans:e2
      ->  @translateExpression op, e1, e2

    Arithmetic :node :pos :type :op trans:e1 trans?:e2
      ->  @translateExpression op, e1, e2

    Unary :node :pos :type :op trans:e
      ->  @translateExpression op, e

    Dereference :node :pos :type :name anything*
      ->  [name, isPointer] = @currentScope.getNameOf(name)
          pair = [[], name]
          pair.isPointer = true
          pair

    Element :node :pos :type trans:array trans:index
      ->  [indexbody, indexresult] = @source index
          [arraybody, arrayresult] = @source array
          [concat(indexbody, arraybody,
            [['ArrayAccess', temp = @newTemp(), arrayresult, indexresult, type]]
          ), temp]

    Value :node :pos :type :v
      ->  @translateValue v, type

    Number :node :pos :type :n
      ->  @translateValue n, type

    Letter :node :pos :type :ch
      ->  @translateValue ch, type

    Sentence :node :pos :type :string
      ->  @translateValue string, type

    enterScope :scope
      ->  @currentScope = scope

    exitScope
      ->  @currentScope = @currentScope.outer

    callees
      ->  for reg in calleeRegs
            [@newTemp(), reg]

    initialize
      ->  @labelCounter = 0
          @tempCounter = 0
          @mangles = 0
          @functions = []

  MAliceTranslator::translateExpression = (op, e1, e2) ->
    [e1body, e1result] = @source e1
    [e2body, e2result] = @source e2 if e2?
    result = @newTemp()
    [concat(e1body, e2body ? [],
      if e2?
        [['Assignment', result, e1result], ['ImmAssignment', result, op, result, e2result]]
      else
        [['ImmAssignment', result, op, e1result]]
    ), result]

  MAliceTranslator::translateValue = (v, type) ->
    [[['ValAssignment', temp = @newTemp(), v, type]], temp]

  MAliceTranslator::source = (value) ->
    if value.isPointer?
      [_, name] = value
      [[['Assignment', temp = @newTemp(), name]], temp]
    else
      value

  MAliceTranslator::destination = (value) ->
    value

  MAliceTranslator::newLabel = ->
    "L" + @labelCounter++

  MAliceTranslator::newTemp = ->
    "t" + @tempCounter++

  MAliceTranslator::declare = (node, name) ->
    newName = namer.newTemporary name
    node?.mangledName = newName
    newName

  MAliceTranslator::wrapCalleesAround = (body) ->
    callees = @callees()
    concat pushCallees(callees), body, popCallees(callees)

  pushCallees = (callees) ->
    for [temp, reg] in callees
      node = ['Assignment', temp, reg]
      node.isPush = true
      node

  popCallees = (callees) ->
    (for [temp, reg] in callees
      node = ['Assignment', reg, temp]
      node.isPop = true
      node
    ).reverse()

  MAliceTranslator::passFreeVariables = (scope) ->
    freePushes = []
    freePops = []
    for freeName, freeNode of scope.frees
      [mangledName, _] = @currentScope.getNameOf freeNode.name()
      freePushes.unshift ['Param', mangledName]
      freePops.push ['ParamPop', mangledName]
    [freePushes, freePops]

  addressCode = MAliceTranslator.match ast, "trans", undefined, (m, i) ->
    throw "ERROR while traversing AST in translator"
  addressCode.namer = namer

  return addressCode
