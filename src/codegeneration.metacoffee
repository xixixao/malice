errorHandler = require './errorprinter'
{concat} = require './metaCoffeeUtils'

module.exports = (OMeta, OMLib) -> generateCode: (ast) ->

  registers = [
    "rax"
    "rbx"
    "rcx"
    "rdx"
    "r8"
    "r9"
    "r10"
    "r11"
    "r12"
    "r13"
    "r14"
    "r15"
  ]

  ometa MAliceCodeGeneration

    trans = [:t apply(t):ans] -> ans
    list = trans*:result end -> result

    Label :name
      -> ["#{name}:"]
    End :name
      -> [""]
    Variable :name :type
      -> [""]
    Array :name :type :size
      -> [""]
    IfFalse :condition :jumpto
      -> ["\tcmp #{condition}, 0",
          "je #{jumpto}"]
    IfTrue :condition :jumpto
      -> ["\tcmp #{condition}, 0",
          "\tjne #{jumpto}"]
    Jump :to
      -> ["\tjmp #{to}"]
    Param :name
      -> ["\tpush #{@registerForVariable name}"]
    Argument :name :type
      -> [""]
    ArrayAccess :into :array :i
      -> ["\tmov #{@registerForVariable into}, [#{@registerForVariable array} + #{i}]"]
    ArrayAssignment :array :i :value
      -> ["\tmov [#{@registerForVariable array}+#{i}], #{@registerForVariable value}"]
    Decrement :variable
      -> ["\tdec #{@registerForVariable variable}"]
    Increment :variable
      -> ["\tinc #{@registerForVariable variable}"]
    Call :name :argumentCount
      -> ["\tcall #{name}",
          "\tadd rsp, #{4 * argumentCount}"]
    Assignment :into :from
      -> ["\tmov #{@registerForVariable into}, #{@registerForVariable from}"]
    ValAssignment :into :value :type
      -> ["\tmov #{@registerForVariable into}, #{value}"]
    CallAssignment :into :name :argumentCount
      -> ["\tcall #{name}",
          "\tadd rsp, #{4 * argumentCount}",
          "\tmov #{@registerForVariable into}, eax"]
    ImmAssignment :into :operator :e1 anything?:e2
      -> [""]
    Return :result
      -> ["\tmov eax, #{@registerForVariable result}",
          "\tret"]
    Output :value :type
      -> ["\tpush #{@registerForVariable value}",
          "\tcall printf"]
    Read :into :type
      -> [""]

    initialize
      -> @registerCounter = 0
         @variables = {}


  MAliceCodeGeneration::registerForVariable = (variable) ->
    unless @variables[variable]?
      @variables[variable] = registers[@registerCounter++]
    @variables[variable]

    #global = MAliceCodeGeneration.matchAll ast.global, "list", undefined, (m, i) -> console.error "ERROR while traversing AST in code generation"
  MAliceCodeGeneration.matchAll ast.stack, "list", undefined, (m, i) -> console.error "ERROR while traversing AST in code generation"
