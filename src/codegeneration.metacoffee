errorHandler = require './errorprinter'
{concat} = require './metaCoffeeUtils'
{types} = require './nodes'

module.exports = (OMeta, OMLib) -> generateCode: (threeCode) ->

  argumentRegisters = [
    'rdi'
    'rsi'
    'rdx'
    'rcx'
    'r8'
    'r9'
  ]

  opInstructions =
    '+': 'add'
    '-': 'sub'
    '*': 'imul'
    '|': 'or'
    '^': 'xor'
    '&': 'and'

  unaryOpInstructions =
    '-': 'neg'
    '~': 'not'

  cmpOpInstructions =
    '==': 'sete'
    '!=': 'setne'
    '<=': 'setle'
    '>=': 'setge'
    '<' : 'setl'
    '>' : 'setg'

  callCFunction = (name, args...) ->
    instructions = []
    for arg, i in args
      instructions.push "\tmov #{argumentRegisters[i]}, #{arg}"
    concat instructions, ["\tmov eax, 0",
                          "\tcall #{name}"],

  ometa MAliceCodeGeneration

    trans = [:t apply(t):ans] -> ans
    list = trans*:result end -> @finalOutput result

    Label :name
      -> ["#{name}:"]
    Begin
      -> ['\tpush rbp',
          '\tmov rbp, rsp']
    End :name
      -> args = []
         for argument in @liftedArguments.reverse()
           args.unshift "\tmov [rbp+#{16+8*--@argumentCount}], #{@accessVariable argument}"
         @liftedArguments = []
         concat args, ['\tleave',
                       '\tret']
    Array :name :type :size
      -> if type.equals types.letter
           alloc = 'alloc_c'
         else if type.equals types.number
           alloc = 'alloc_i'
         callCFunction alloc, size
    IfFalse :condition :jumpto
      -> ["\tcmp #{@accessVariable condition}, 0",
          "\tje #{jumpto}"]
    IfTrue :condition :jumpto
      -> ["\tcmp #{@accessVariable condition}, 0",
          "\tjne #{jumpto}"]
    Jump :to
      -> ["\tjmp #{to}"]
    Param :name
      -> ["\tpush #{@accessVariable name}"]
    ParamPop :name
      -> ["\tpop #{@accessVariable name}"]
    Argument :name :type
      -> if Array.isArray name
           [name] = name
           @liftedArguments.push name
         ["\tmov #{@accessVariable name}, [rbp+#{16+8*@argumentCount++}]"]
    ArrayAccess :into :array :i
      -> ["\tmov #{@accessVariable into}, [#{@accessVariable array} + #{i}]"]
    ArrayAssignment :array :i :value
      -> ["\tmov [#{@accessVariable array}+#{i}], #{@accessVariable value}"]
    Decrement :variable
      -> ["\tdec #{@accessVariable variable}"]
    Increment :variable
      -> ["\tinc #{@accessVariable variable}"]
    Call :name :argumentCount
      -> result = ["\tcall #{name}"]
         if argumentCount > 0
           result.push "\tadd rsp, #{8 * argumentCount}"
         result
    Assignment :into :from
      -> ["\tmov #{@accessVariable into}, #{@accessVariable from}"]
    PtrAssignment :into :from
      -> ["\tmov [#{@accessVariable into}], #{@accessVariable from}"]
    ValAssignment :into :value :type
      -> if type.equals types.sentence
           return ["\tmov #{@accessVariable into}, #{@accessData value}"]
         if type.equals types.letter
           value = value.charCodeAt 0
         ["\tmov #{@accessVariable into}, #{value}"]
    CallAssignment :into :name :argumentCount
      -> ["\tcall #{name}",
          "\tadd rsp, #{8 * argumentCount}",
          "\tmov #{@accessVariable into}, rax"]
    ImmAssignment :into :op :e1 anything?:e2
      -> e1 = e2 if e2?
         if op == '/'
           ["\tmov rax, #{@accessVariable into}",
            "\txor rdx, rdx",
            "\tidiv #{@accessVariable e1}",
            "\tmov #{@accessVariable into}, rax"]
         if op in ['==', '!=', '<=', '>=', '<', '>']
           ["\tcmp #{@accessVariable into}, #{@accessVariable e1}",
            "\t#{cmpOpInstructions[op]} al",
            "\tmovzx #{@accessVariable into}, al"]
         else
           if e2?
             ["\t#{opInstructions[op]} #{@accessVariable into}, #{@accessVariable e1}"]
           else
             ["\tmov #{@accessVariable into}, #{@accessVariable e1}",
              "\t#{unaryOpInstructions[op]} #{@accessVariable into}"]
    Return :result
      -> ["\tmov rax, #{@accessVariable result}"]
    Output :value :type
      -> callCFunction 'printf', @formatString(type), @accessVariable(value)
    Read :into :type
      -> if type.equals types.sentence
           readInstructions = ["\tcall read"]
         else
           readInstructions = concat ["\tsub rsp, 8"],
                                     callCFunction('scanf', @formatString(type), 'rsp'),
                                     ["\tmov rax, [rsp]"]
         concat readInstructions,
                ["\tmov #{@accessVariable into}, rax"]
    initialize
      -> @registerCounter = 0
         @variables = {}
         @data = []
         @liftedArguments = []
         @argumentCount = 0

  MAliceCodeGeneration::accessVariable = (variable) ->
    'r' + variable[1..]

  MAliceCodeGeneration::accessData = (string) ->
    pos = @data.indexOf string
    if pos is -1
      @data.push string
      pos = @data.length - 1
    "OFFSET FLAT:.LC#{pos}"

  MAliceCodeGeneration::formatString = (type) ->
    if type.equals types.sentence
      @accessData '%s'
    else if type.equals types.letter
      @accessData '%c'
    else if type.equals types.number
      @accessData '%d'

  MAliceCodeGeneration::writeDataSection = ->
    dataSection = []
    for string, i in @data
      dataSection.push ".LC#{i}:"
      dataSection.push """\t.string "#{string}" """
    dataSection.join '\n'

  MAliceCodeGeneration::finalOutput = (instructions) ->
    output = ['.intel_syntax noprefix']
    output.push '.section .rodata'
    output.push @writeDataSection()
    output.push '.text'
    output.push '\t.globl main'
    output = concat output, (concat instructions...)
    output = output.join '\n'
    output + '\n'

  MAliceCodeGeneration.matchAll threeCode, "list", undefined, (m, i) -> console.error "ERROR while traversing AST in code generation"
