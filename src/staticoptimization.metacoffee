#
# staticoptimization.metacoffee
#
#   Semantic analysis, type and error checking
#

ErrorPrinter = require './semantics/ErrorPrinter'
{concat, join} = require './metaCoffeeUtils'
{log} = require './utils'
{Node, Executes, Value, types} = require './nodes'

module.exports = (OMeta, OMLib) -> optimize: (source, ast) ->

  MAliceASTWalker = require('./semantics/walker')(OMeta, OMLib)

  ometa MAliceStaticOptimizer extends MAliceASTWalker

    If :node  :pos :returns trans:cond trans:ifReturns trans:elseReturns
      ->  if cond.constant? and cond.value()
            ifReturns
          else if cond.constant? and !cond.value()
            elseReturns
          else
            new Executes 'If', pos, returns, cond, ifReturns, elseReturns

    Until :node :pos :returns trans:cond trans:body
      ->  if cond.constant? and cond.value() or body.empty?
            new Executes 'Skip'
          else if cond.constant? and !cond.value() and !body.empty?
            # issue infinite looop warning
          else
            new Executes 'Until', pos, returns, cond, body

    Statements :node :pos :returns trans*:ss
      ->  reachable = []
          for statement in ss
            reachable.push statement
            break if statement.doesReturn()
          concat new Executes('Statements', pos, returns), reachable

    Logic :node :pos :type '!' ['Logic' :bp :bt '!' trans:bb]
      ->  bb
    Logic :node :pos :type :op trans:b1 trans?:b2
      ->  @tryToEvaluate node, pos, op, types.boolean, b1, b2

    Compare :node :pos :type :op trans:e1 trans:e2
      ->  res = @tryToEvaluate node, pos, op, types.boolean, e1, e2
          return res

    Arithmetic :node :pos :type :op trans:e1 trans?:e2
      ->  @tryToEvaluate node, pos, op, e1.type(), e1, e2

    Unary :node :pos :type '+' trans:e
      ->  e
    Unary :node :pos :type '-' ['Unary' :ep :et '-' trans:ee]
      ->  ee
    Unary :node :pos :type '~' ['Unary' :ep :et '~' trans:ee]
      ->  ee
    Unary :node :pos :type :op trans:e
      ->  if e.constant?
            new Result node, evaluate pos, op, e
          else
            node

    Number :node :pos :type :n
      ->  new Result node, parseInt n

    Letter :node :pos :type :ch
      ->  new Result node, ch.charCodeAt(0)

    Sentence :node :pos :type :string
      ->  node

  MAliceStaticOptimizer::tryToEvaluate = (node, pos, op, type, e1, e2) ->
    if e1.constant and (!e2? or e2.constant) and (value = evaluate pos, op, e1, e2)?
      new Result ['Value', pos, type], value
    else
      node

  class Result extends Value
    constructor: (node, value) ->
      node = Value.wrap super(node...), value: 3
      node.constant = true
      return node.value value

  evaluate = (pos, op, r1, r2) ->
    v1 = r1.value()
    v2 = r2?.value()
    switch op
      when '/'
        if v2 == 0
          errorPrinter.warning "Division by 0 in constant expression", pos
          undefined
        else
          (Math.floor Math.abs v1 / v2) * (if v1 / v2 < 0 then -1 else 1)
      else
        if v2?
          eval "#{v1.toString()} #{op} #{v2.toString()}"
        else
          eval "#{op}#{v1.toString()}"

  errorPrinter = new ErrorPrinter source
  MAliceStaticOptimizer.match ast, "trans", undefined, (m, i) ->
    throw "ERROR while traversing AST in static optimizer"